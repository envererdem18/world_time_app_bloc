# This file configures the analyzer, which statically analyzes Dart code to
# check for errors, warnings, and lints.
#
# The issues identified by the analyzer are surfaced in the UI of Dart-enabled
# IDEs (https://dart.dev/tools#ides-and-editors). The analyzer can also be
# invoked from the command line by running `flutter analyze`.

# The following line activates a set of recommended lints for Flutter apps,
# packages, and plugins designed to encourage good coding practices.
include: package:flutter_lints/flutter.yaml

analyzer:
  exclude: [lib/**.freezed.dart, lib/**.g.dart, lib/**.config.dart]
  errors:
    invalid_annotation_target: ignore

linter:
  # The lint rules applied to this project can be customized in the
  # section below to disable rules from the `package:flutter_lints/flutter.yaml`
  # included above or to enable additional rules. A list of all available lints
  # and their documentation is published at
  # https://dart-lang.github.io/linter/lints/index.html.
  #
  # Instead of disabling a lint rule for the entire project in the
  # section below, it can also be suppressed for a single line of code
  # or a specific dart file by using the `// ignore: name_of_lint` and
  # `// ignore_for_file: name_of_lint` syntax on the line or in the file
  # producing the lint.
  rules:
    avoid_empty_else: true
    avoid_relative_lib_imports: true
    avoid_shadowing_type_parameters: true
    avoid_types_as_parameter_names: true
    await_only_futures: true
    camel_case_extensions: true
    camel_case_types: true
    curly_braces_in_flow_control_structures: true
    depend_on_referenced_packages: true
    empty_catches: true
    file_names: true
    hash_and_equals: true
    iterable_contains_unrelated_type: true
    list_remove_unrelated_type: true
    no_duplicate_case_values: true
    non_constant_identifier_names: true
    null_check_on_nullable_type_parameter: true
    package_prefixed_library_names: true
    prefer_generic_function_type_aliases: true
    prefer_is_empty: true
    prefer_is_not_empty: true
    prefer_iterable_whereType: true
    prefer_typing_uninitialized_variables: true
    provide_deprecation_message: true
    unnecessary_overrides: true
    unrelated_type_equality_checks: true
    valid_regexps: true
    void_checks: true


    #kahsak
    avoid_renaming_method_parameters: false
    # Too verbose
    prefer_final_parameters: false

    # Too verbose with little value, and this is taken care of by the Flutter devtool anyway.
    diagnostic_describe_all_properties: false

    always_declare_return_types: true
    avoid_catching_errors: true

    # Sometimes we need static members to indicate
    # this member belongs to what, like Config.flavor
    avoid_classes_with_only_static_members: false

    avoid_double_and_int_checks: true
    avoid_dynamic_calls: true

    avoid_escaping_inner_quotes: true
    avoid_field_initializers_in_const_classes: true
    avoid_implementing_value_types: true
    avoid_js_rounded_ints: true
    avoid_multiple_declarations_per_line: true
    avoid_print: true
    avoid_private_typedef_functions: true
    avoid_redundant_argument_values: true

    avoid_returning_null: true
    avoid_returning_null_for_future: true
    avoid_returning_this: true
    avoid_setters_without_getters: true
    avoid_slow_async_io: true
    avoid_type_to_string: true
    avoid_types_on_closure_parameters: true
    avoid_unused_constructor_parameters: true
    avoid_void_async: true
    cancel_subscriptions: true
    cascade_invocations: true
    cast_nullable_to_non_nullable: true
    close_sinks: true
    deprecated_consistency: true
    directives_ordering: true
    do_not_use_environment: true
    flutter_style_todos: true
    invariant_booleans: true
    join_return_with_assignment: true
    leading_newlines_in_multiline_strings: true

    literal_only_boolean_expressions: true
    missing_whitespace_between_adjacent_strings: true
    no_adjacent_strings_in_list: true

    # Default case in switch is needed.
    no_default_cases: false

    no_runtimeType_toString: true
    noop_primitive_operations: true
    one_member_abstracts: true
    only_throw_errors: true
    package_api_docs: true
    parameter_assignments: true
    prefer_asserts_in_initializer_lists: true
    prefer_asserts_with_message: true

    prefer_constructors_over_static_methods: true
    prefer_final_in_for_each: true
    prefer_final_locals: true
    prefer_foreach: true
    prefer_if_elements_to_conditional_expressions: true
    prefer_int_literals: true
    prefer_null_aware_method_calls: true

    # Conflicts with `always_use_package_imports`
    prefer_relative_imports: false
    prefer_single_quotes: false

    # Ensures to document all public variables and classes.
    public_member_api_docs: false
    require_trailing_commas: true

    # We sort the dependencies by categories, not alphabetically.
    sort_pub_dependencies: false

    sort_unnamed_constructors_first: true
    test_types_in_equals: true
    throw_in_finally: true
    type_annotate_public_apis: true
    unawaited_futures: true
    unnecessary_await_in_return: true
    unnecessary_lambdas: true
    unnecessary_null_checks: true
    unnecessary_raw_strings: true
    unnecessary_statements: true
    unsafe_html: true

    use_if_null_to_convert_nulls_to_bools: true
    use_is_even_rather_than_modulo: true
    use_late_for_private_fields_and_variables: true
    use_named_constants: true
    use_raw_strings: true
    use_string_buffers: true
    use_test_throws_matchers: true
    use_to_and_as_if_applicable: true

# Additional information about this file can be found at
# https://dart.dev/guides/language/analysis-options
